AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Scheduled Lambda'

Parameters:
  Application:
    Type: String
  LambdaName:
    Type: String
  LambdaHandler:
    Type: String
  LambdaBucketName:
    Type: String
  LambdaZipFile:
    Type: String


Resources:
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*


  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Application}-${LambdaName}-lambda
      Code:
        S3Bucket: !Sub ${LambdaBucketName}
        S3Key: !Sub${LambdaZipFile}
      Handler: !Sub ${LambdaHandler}
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - arm64
      Runtime: dotnet6
      Timeout: 60
      MemorySize: 512
  
  LambdaFunctionSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(15 minutes)"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: 1
  
  LambdaFunctionSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaFunctionSchedule.Arn
    
  

  


      